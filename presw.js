(function(){
    /*
var d0c = document;
function mainjsLoaded() {
    var arrScripts = d0c.body.getElementsByTagName("script");
    for(var i = 0; i < arrScripts.length; i++)
    {
        if(arrScripts[i].src.lastIndexOf("parser") != -1)
        {
            return true;
        }
    }
    return false;
}
function addBundleJS() {
    //hashes is autogenerated by webpack, should be in html <script> right before this script.
    if(!mainjsLoaded() && hashes)
    {
        var vendors = d0c.createElement("script");
        var script = d0c.createElement("script");
        if(hashes["main"]["css"])//note: in inject_mode this will be undefined
        {
            var css = d0c.createElement("link");
            css.rel = "stylesheet";
            css.href = './' + hashes["main"]["css"];
            d0c.head.appendChild(css);
        }
        vendors.src = './' + hashes["vendors~main"]["js"];
        script.src = './' + hashes["main"]["js"];
        d0c.body.appendChild(vendors);
        d0c.body.appendChild(script);
    }
}*/
var nojs = document.getElementById("nojs-cover");
if(nojs){
    nojs.style.display = "none";
}

// Webpack dev-server's inject_mode will add bundle for us. This function is just for prod.
var inject = document.getElementById("inject");
if(inject) {
    return;
}

// If we include swhandler.js, this app uses service workers.
if(typeof wait_for_svc_worker_setup === "function") {
    // If zzzz is in URL, delete and skip service worker.
    if(typeof window.location.href === "string" && window.location.href.indexOf("zzzz") !== -1) {
        delete_old_service_workers();
        // addBundleJS();
    } else {
        wait_for_svc_worker_setup(0).then(function(rsVal){
            // addBundleJS();
        });
    }
} else {
    // No service worker mode
    // addBundleJS();
}
})();